--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: This is called after the controller is instantiated to figure out where to look for templates under the _template_root. Override this to define a new structure for your app.
- !ruby/struct:SM::Flow::H 
  level: 4
  text: Parameters
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "context<~to_s>:"
    body: The controller context (the action or template name).
  - !ruby/struct:SM::Flow::LI 
    label: "type<~to_s>:"
    body: The content type. Defaults to nil.
  - !ruby/struct:SM::Flow::LI 
    label: "controller<~to_s>:"
    body: The name of the controller. Defaults to controller_name.
  type: :NOTE
- !ruby/struct:SM::Flow::H 
  level: 4
  text: Returns
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "String:"
    body: Indicating where to look for the template for the current controller, context, and content-type.
  type: :NOTE
- !ruby/struct:SM::Flow::H 
  level: 4
  text: Notes
- !ruby/struct:SM::Flow::P 
  body: The type is irrelevant for controller-types that don't support content-type negotiation, so we default to not include it in the superclass.
- !ruby/struct:SM::Flow::H 
  level: 4
  text: Examples
- !ruby/struct:SM::Flow::VERB 
  body: "  def _template_location\n    &quot;#{params[:controller]}.#{params[:action]}.#{content_type}&quot;\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: This would look for templates at controller.action.mime.type instead of controller/action.mime.type
full_name: Merb::AbstractController#_template_location
is_singleton: false
name: _template_location
params: (context, type = nil, controller = controller_name)
visibility: public
