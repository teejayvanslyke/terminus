--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Merge environment settings Can allow you to have a &quot;localdev&quot; that runs like your &quot;development&quot;
- !ruby/struct:SM::Flow::VERB 
  body: "  OR\n"
- !ruby/struct:SM::Flow::P 
  body: A &quot;staging&quot; environment that runs like your &quot;production&quot;
- !ruby/struct:SM::Flow::H 
  level: 4
  text: Examples
- !ruby/struct:SM::Flow::P 
  body: From any environment config file (ie, development.rb, custom.rb, localdev.rb, etc)
- !ruby/struct:SM::Flow::VERB 
  body: "  staging.rb:\n    Merb.merge_env &quot;production&quot;         #We want to use all the settings production uses\n    Merb::Config.use { |c|\n      c[:log_level]         = &quot;debug&quot;   #except we want debug log level\n      c[:exception_details] = true      #and we want to see exception details\n    }\n"
- !ruby/struct:SM::Flow::H 
  level: 4
  text: Parameters
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "env<~String>:"
    body: Environment to run like
  - !ruby/struct:SM::Flow::LI 
    label: "use_db<~Boolean>:"
    body: Should Merb use the merged environments DB connection
  type: :NOTE
- !ruby/struct:SM::Flow::VERB 
  body: "    Defaults to <tt>false</tt>\n"
full_name: Merb::merge_env
is_singleton: true
name: merge_env
params: (env,use_db=false)
visibility: public
